---
title: "Assignment 2 RCP"
author: "Izzul Fattah Aji Pratama"
format: html
editor: visual
warnings: false
echo: false
message: false
---

```{r}
options(warn = -1)
```

### Question 1: Create New RStudio Project and Quarto file

-   Open RStudio \> New Project \> Version Control \> Git \> Paste the repository URL that was previously created on GitHub.

-   To create a Quarto (QMD) file, in the new RStudio Project, select **File \> New File \> Quarto Document \> Save as** (example.qmd)

-   Set the YAML format to html and select render option to start rendering

    ![](images/clipboard-3291366609.png)

    ### Question 2: Initialize Git and Push to the Repo

-   Previously we already created an R project. However, to make this project is reproducible we must place our file in a repository so the others could also see and work on this

-   Open the RStudio terminal and initialize a Git repository by typing `git init`

-   add all files by typing `git add .`

-   Commit the file using `git commit -m "initial commit"`

-   Up until this point, we could know that Git actually could work without GitHub to track changes of our file. However, since this demo is to show a reproducible practices, we need to set up a repo in GitHub then copy the SSH code and type `git remote add origin <paste the repo url>` to link the local repo to GitHub repo.

-   After we connect the repo, we could see that the default name of the main branch is "master" . Because we already familiar with the name of "main" lets just change it by typing `git branch -M main`

-   the last step is to push our changes by typing `git push -u origin main`

    ![](images/clipboard-3326618688.png)

### Question 3: Create Branch, Modify File, and Add the File

-   Type `git checkout -b testbranch` in the terminal to create a new branch called `testbranch` and switch to it.

-   Modify the file to test. For example, I am modifying the file by typing the Question 3 command.

-   Type `git status` in the terminal to check whether Git is tracking the changes. Then type `git add .` to stage the file and `git commit -m "pushing file to testbranch"`.

-   Finish with the command `git push origin testbranch` to push the changes to the `testbranch`.

    ![](images/clipboard-1433599888.png)

### Question 4: Add Data Folder and Amend the Previous Commit

-   Create a `data` folder in the working directory and fill it with the Assignment 1 data. Then commit it.

-   If, for instance, the wrong data was copied and needs to be replaced with the correct file, you can use the `git commit --amend` function to edit the last commit.

### Question 5: Modify example.qmd in Main to Prepare Creating Conflict

-   Type `git checkout main` in the terminal to switch back to the `main` branch.

-   Add some changes in exapmle.qmd on main

-   Then push the changes to the `main`. This will create an error in Question 6 because what the `main` branch records right now is only Questions 1, 2, 5, and will continue to 6, whereas `testbranch` records Questions 3 and 4.

### Question 6: Merge and Resolve Conflict

-   Now, to simulate a conflict, type `git merge testbranch` to merge the changes from the branch.

-   Git will show an error like this:

![](images/clipboard-2659250452.png)

-   Then, in the **Source** panel, this message will pop up showing `<<<<<<< HEAD` and `=======`. This means Git wants us to clarify which changes we want to keep.

    ![](images/clipboard-3277969989.png){width="667"}

-   In this case, I choose to keep all the changes that I have made both in the branch and in `main`, so I just need to delete all of the `<<<<<<< HEAD` and `=======` signs.

### Question 7: Create a Commit Using Annotated Tag

-   After resolving the conflict in the previous question, we want to push the changes with an annotated tag.
-   Type `git tag -a v1.0 -m "Tagging version 1.0"` to create a commit with an annotated tag.
-   Push it using `git push origin v1.0`.

![](images/clipboard-2645839883.png)

### Question 8: Delete Testbranch

-   To delete the `testbranch` we created earlier, use the command `git branch -d testbranch` to delete the local branch.

-   Then, type `git push origin --delete testbranch` to push the deletion process to GitHub.

![](images/clipboard-348984791.png)

### Question 9: Show Condensed Log

-   As we've made many changes to our files, Git has a feature to show the commits we have made so we can track them.
-   To do this, type `git log --oneline` in the terminal to see a condensed view of the commit history.

![](images/clipboard-2469502363.png)

### Question 10: Undo Commit Without Losing Changes

-   Git also has a feature to undo a commit while preserving the changes you made. It moves the commit pointer to a previous state but keeps the changes from that commit in the staging area (index). This allows you to edit or add new changes before committing again.

-   To do this, type `git reset --soft HEAD~1` in the terminal.

-   In this example, we will practice using the function by committing a simple plot using `ggplot2`.

```{r}

library(tidyverse)
# Create a sample data frame
data <- data.frame(
  x = c(1, 2, 3, 4, 5),
  y = c(2, 3, 5, 7, 11)
)

# plotting the result
ggplot(data, aes(x = x, y = y)) +
  geom_point() +
  labs(title = "Simple Scatter Plot", x = "X Axis", y = "Y Axis")

```

-   First, we commit our plot to the repository, but after committing, we realize we want to make some changes to the plot. For example, we want to change the title to "Simple Scatter Plot" instead of "Scatter Plot".

![](images/clipboard-4149047022.png)

-   After running the command `git reset --soft HEAD~1` and checking our commit history, we will see that the commit has moved one step back but the work remains in the directory and is ready to be committed again.

    ![](images/clipboard-1567667199.png)

-   After we finish the revision, the file is ready to be committed again.

    ![](images/clipboard-1761549367.png)
