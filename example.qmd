---
title: "example"
author: "Izzul Fattah Aji Pratama"
format: html
editor: visual
---

### Question 1: Create New RStudio Project and Quarto file

-   Open RStudio \> New Project \> Version Control \> Git \> Paste the repo url that previously has been made from the github

-   Create QMD file: in new RProj, select new file on the top left \> Quarto Document \> Save as (example.qmd)

-   Set the YAML format to html and select render option to start rendering

    ![](images/clipboard-3291366609.png)

    ### Question 2: Initialize Git and Push to the Repo

-   From the terminal in RStudio, type `git status` to check what changes that we have made

-   Type `git add .` to stage the file

-   Type `git commit -m " fill with meaningful commit messages"`

-   From the terminal in RStudio, type git status to check what changes that we have made

-   Type git add . to stage the file

-   Type git commit -m " fill with meaningful commit messages"

-   Type git push origin main to push the changes that we have made to our main branch

-   Check our repo from github to make sure our push is already success

    ![](images/clipboard-3326618688.png)

### Question 3: Create Branch, Modify File, and Push

-   Type `git checkout -b testbranch` from the terminal to create a new branch called testbranch as well as switch to the branch.

-   Modify the file to test, in this case I am modifying the file by typing the Question 3 command

-   Type `git status` in terminal to check whether git is tracking our changes then followed by `git add .` to stage the file and `git commit -m "pushing file to testbranch"`

-   Finish with command `git push origin testbranch` to push our changes to the branch

    ![](images/clipboard-1433599888.png)

### Question 4: Add Data Folder and Amend the Previous Commit

-   Create a `data` folder in our working directory and fill it with the Assignment 1 data

-   check our changes with `git status` first and followed by `git commit --amend -m "amend the previous commit add data folder"`

-   Continue with `git push --set-upstream origin testbranch` to tell Git to track this remote branch for future pushes

-   Once the upstream is already set, the type `git push origin testbranch` the overwrite the previous commit.

### Question 5: Modify example.qmd in Main to Preapare Creating Conflict

-   type `git checkout main` in the terminal to switch back to our main branch

-   Add some changes in exapmle.qmd on main

-   then push our changes to the main. this should create an error when we do question 6 because what main branch records right now is only Question 1,2,5, and will continue to 6. While the testbranch it records question 3 and 4.

### Question 6: Merge and Resolve Conflict

-   Now we want to simulate conflict. Type `git merge testbranch` to merge the changes with the branch

-   Git will show an error like this:

![](images/clipboard-2659250452.png)

-   Then in our source panel will pop up this messages showing `<<<<<< HEAD and ======`. This means that git want us to clarify which changes that we want to keep. in this case, i choose to keep all the changes that I have been made both in branch and main so I just need to delete all of the `<<<<<< HEAD and ======` sign.

    ![](images/clipboard-3277969989.png){width="667"}

### Question 7: Create a Commit Using Annotated Tag

-   After we resolve the conflict in the previous question, we want to push the changes with annotated tag to the push. Type `git tag -a v1.0 -m "Tagging version 1.0"` to create a commit with an annotated flag and push it with `git push origin v1.0`

![](images/clipboard-2645839883.png)

### Question 8: Delete Testbranch

-   to delete the `testbranch` that we have already created, we could use git command from terminal to do that. type `git branch -d testbranch` to initiate the deletion of the branch then followed by the command `git push origin --delete testbranch` to push the deletion process.

    ![](images/clipboard-348984791.png)

### Question 9: Show Condensed Log

-   As per now, we already done so many changes in our files and Git also had a feature to show what commit that we have done so we could track it. to do so, we could type `git log --oneline` command in the terminal

![](images/clipboard-2469502363.png)

### Question 10: Undo Commit Without Losing Changes

-   Git also has a feature to undo a commit while preserving the changes you made. It "moves" the commit pointer to a previous state but keeps the changes from that commit in the staging area (index). This allows you to edit or add new changes before committing again. We could do this by typing `git reset --soft HEAD~1` command in the terminal. In this example we will try exercise the function by committing a simple plot using ggplot.

    ```{r}

    library(tidyverse)
    # Create a sample data frame
    data <- data.frame(
      x = c(1, 2, 3, 4, 5),
      y = c(2, 3, 5, 7, 11)
    )

    # plotting the result
    ggplot(data, aes(x = x, y = y)) +
      geom_point() +
      labs(title = "Simple Scatter Plot", x = "X Axis", y = "Y Axis")

    ```

-   First we try to commit our plot to the repo but suddenly after committing we realize we want to make some changes to plot. lets say I want to change the title to "Simple Scatter Plot" instead of "Scatter Plot"

![](images/clipboard-4149047022.png)

-   After we type the command of `git reset --soft HEAD~1` and check our commit history, it show that the commit is already moves one step behind but still keeps our work in the directory and ready to be committed again.

    ![](images/clipboard-1567667199.png)
